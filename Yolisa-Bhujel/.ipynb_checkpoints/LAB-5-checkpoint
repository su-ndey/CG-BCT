{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "558c73a2-cc17-4121-ae09-c83e713f3f62",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (614641951.py, line 19)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[5], line 19\u001b[1;36m\u001b[0m\n\u001b[1;33m    ( dx >= dy ):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x0= int(input(\"enter the starting coordinate x0: \"))\n",
    "y0= int(input(\"enter the starting coordinate y0: \"))\n",
    "x1= int(input(\"enter the ending coordinate x1: \"))\n",
    "y1= int(input(\"enter the ending coordinate y1: \"))\n",
    "\n",
    "dx= abs(x1-x0)\n",
    "dy= abs(y1-y0)\n",
    "    \n",
    "if (x1>x0):\n",
    "    sx = 1\n",
    "else:\n",
    "    sx = -1\n",
    "if ( y1 > y0 ):\n",
    "    sy = 1\n",
    "else:\n",
    "    sy = -1\n",
    "     ( dx >= dy ):\n",
    "    print('the line has shallow slope(m<=1)')\n",
    "    po = 2*dy - dx \n",
    "    \n",
    "elif ( dx < dy ):\n",
    "    print('the line has steep slope(m>1)')\n",
    "    po = 2*dx - dy\n",
    "pointsx=[]\n",
    "pointsy=[]\n",
    "\n",
    "for i in range(max(dx,dy)):   \n",
    "    if ( dx >= dy ):\n",
    "        x0 = x0 + sx\n",
    "        if ( po >= 0 ):\n",
    "            y0 = y0 + sy\n",
    "            po = po + 2*dy - 2*dx\n",
    "        else:\n",
    "            po = po + 2*dy\n",
    "        pointsx.append(x0)\n",
    "        pointsy.append(y0)\n",
    "else:\n",
    "        y0 = y0 + sy\n",
    "        if ( po >= 0 ):\n",
    "            x0 = x0 + sx\n",
    "            po = po + 2*dx - 2*dy\n",
    "        else:\n",
    "            po = po + 2*dx\n",
    "        pointsx.append(x0)\n",
    "        pointsy.append(y0)\n",
    "\n",
    "\n",
    "plt.plot(pointsx, pointsy, marker='.', color='teal')\n",
    "plt.title(\"Bresenham's Line Algorithm\")\n",
    "plt.xlabel(\"X-axis\")\n",
    "plt.ylabel(\"Y-axis\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "726b9568-9289-47fc-ae54-416305341197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the starting coordinate x1: 1\n",
      "enter the starting coordinate y1: 1\n",
      "enter the starting coordinate x2: 5\n",
      "enter the starting coordinate y2: 5\n",
      "enter the scaling coordinate sx: 2\n",
      "enter the scaling coordinate sy: 3\n",
      "enter the rotating angle theta: 45\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\n",
      "[6.30232614 5.97674461 5.65116307 5.32558154 5.        ] [-0.50490205  0.87132346  2.24754897  3.62377449  5.        ]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x1=int(input(\"enter the starting coordinate x1:\")) \n",
    "y1=int(input(\"enter the starting coordinate y1:\"))\n",
    "x2=int(input(\"enter the starting coordinate x2:\"))\n",
    "y2=int(input(\"enter the starting coordinate y2:\"))\n",
    "sx=int(input(\"enter the scaling coordinate sx:\"))\n",
    "sy=int(input(\"enter the scaling coordinate sy:\"))\n",
    "theta=int(input(\"enter the rotating angle theta:\"))\n",
    "def bresenham_line(x1, y1, x2, y2):\n",
    "    dx = abs(x2 - x1)\n",
    "    dy = abs(y2 - y1)\n",
    "    sx = 1 if x2 > x1 else -1\n",
    "    sy = 1 if y2 > y1 else -1\n",
    "    if dx > dy:\n",
    "        p = 2 * dy - dx\n",
    "        x, y = x1, y1\n",
    "        points = []\n",
    "        for _ in range(dx + 1):\n",
    "            points.append((x, y)) \n",
    "            if p >= 0:\n",
    "                y += sy  \n",
    "                p -= 2 * dx\n",
    "            x += sx  \n",
    "            p += 2 * dy\n",
    "    else:\n",
    "        p = 2 * dx - dy\n",
    "        x, y = x1, y1\n",
    "        points = []\n",
    "        for _ in range(dy + 1):\n",
    "            points.append((x, y))  \n",
    "            if p >= 0:\n",
    "                x += sx  \n",
    "                p -= 2 * dy\n",
    "            y += sy \n",
    "            p += 2 * dx\n",
    "    return points\n",
    "line_points = bresenham_line(x1,y1,x2,y2)\n",
    "\n",
    "\n",
    "print(line_points)\n",
    "T = np.array([[1, 0, x2], [0, 1, y2], [0, 0, 1]])\n",
    "S = np.array([[sx, 0, 0], [0, sy, 0], [0, 0, 1]])\n",
    "T1 = np.array([[1, 0, -x2], [0, 1, -y2], [0, 0, 1]])\n",
    "RM=np.array([[np.cos(theta),-np.sin(theta),0],[np.sin(theta),np.cos(theta),0],[0,0,1]])\n",
    "CM = T @ RM @ T1\n",
    "x_coords, y_coords = zip(*line_points)\n",
    "p1 = np.vstack([x_coords, y_coords, np.ones_like(x_coords)])\n",
    "newmat = CM @ p1\n",
    "x_coords1, y_coords1 = newmat[0], newmat[1]\n",
    "print(x_coords1, y_coords1)\n",
    "plt.plot(x_coords1, y_coords1,marker=\"x\", color=\"black\" )\n",
    "plt.plot(x_coords, y_coords,marker=\"x\", color=\"black\" )\n",
    "plt.title(\"BLA\")\n",
    "plt.grid(True)\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91309cb7-7a73-4cb3-8b7d-8bcadaacdff2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
